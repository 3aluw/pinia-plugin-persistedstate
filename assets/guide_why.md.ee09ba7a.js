import{_ as s,c as e,o,a}from"./app.145bf23e.js";const u=JSON.parse('{"title":"Why this plugin ?","description":"","frontmatter":{},"headers":[{"level":2,"title":"Do I need a plugin to persist my stores ?","slug":"do-i-need-a-plugin-to-persist-my-stores","link":"#do-i-need-a-plugin-to-persist-my-stores","children":[]},{"level":2,"title":"Why would I need this plugin ?","slug":"why-would-i-need-this-plugin","link":"#why-would-i-need-this-plugin","children":[]}],"relativePath":"guide/why.md","lastUpdated":1678501669000}'),n={name:"guide/why.md"},t=a(`<h1 id="why-this-plugin" tabindex="-1">Why this plugin ? <a class="header-anchor" href="#why-this-plugin" aria-hidden="true">#</a></h1><p>This plugin was born in the early days of Pinia, before it officially replaced <a href="https://vuex.vuejs.org/" target="_blank" rel="noreferrer">VueX</a>. It aims to reproduce <a href="https://github.com/robinvdvleuten/vuex-persistedstate" target="_blank" rel="noreferrer">vuex-persistedstate</a> for Pinia.</p><h2 id="do-i-need-a-plugin-to-persist-my-stores" tabindex="-1">Do I need a plugin to persist my stores ? <a class="header-anchor" href="#do-i-need-a-plugin-to-persist-my-stores" aria-hidden="true">#</a></h2><p>Short answer: &quot;<em>no</em>&quot;. There are a lot of solutions to persist store data in storages such as <code>localStorage</code> that don&#39;t even involve injecting a plugin into Pinia. Here&#39;s the example with <a href="https://vueuse.org/" target="_blank" rel="noreferrer">VueUse</a>&#39;s <code>useLocalStorage</code> :</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki css-variables vp-code-dark" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> { defineStore } </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;pinia&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> { useLocalStorage } </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;@vueuse/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">defineStore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;store&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> () </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">someState</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">useLocalStorage</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;stored-state&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;initialValue&#39;</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> { someState }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})</span></span>
<span class="line"></span></code></pre><pre class="shiki css-variables vp-code-light" tabindex="0"><code><span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> { defineStore } </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;pinia&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> { useLocalStorage } </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;@vueuse/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">defineStore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;store&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> () </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">someState</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">useLocalStorage</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;stored-state&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;initialValue&#39;</span><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-keyword);">return</span><span style="color:var(--shiki-color-text);"> { someState }</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})</span></span>
<span class="line"></span></code></pre></div><h2 id="why-would-i-need-this-plugin" tabindex="-1">Why would I need this plugin ? <a class="header-anchor" href="#why-would-i-need-this-plugin" aria-hidden="true">#</a></h2><p>The <code>pinia-plugin-persistedstate</code> plugin aims to provide persistence to Pinia stores for everyone and in every project with a consistent API. Whether you are fine with the defaults to save a complete store, or you need fine grain configuration with multiple storages and a custom serializer, the plugin got you covered, within the same <code>persist</code> option on the store you want to persist.</p><p>This plugin is actively maintained to bring you the best developer experience possible with persisting your stores. If you have a question, encounter a bug, or want to propose new features, you are very much welcome on the <a href="https://github.com/prazdevs/pinia-plugin-persistedstate" target="_blank" rel="noreferrer">GitHub repository</a> to <a href="https://github.com/prazdevs/pinia-plugin-persistedstate/blob/main/CONTRIBUTING.md" target="_blank" rel="noreferrer">contribute</a>.</p>`,8),r=[t];function i(l,p,c,h,k,y){return o(),e("div",null,r)}const v=s(n,[["render",i]]);export{u as __pageData,v as default};
