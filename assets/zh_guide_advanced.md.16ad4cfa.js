import{_ as s,c as a,o,a as n}from"./app.1560828f.js";const d=JSON.parse('{"title":"进阶用法","description":"","frontmatter":{},"headers":[{"level":2,"title":"全局持久化配置","slug":"全局持久化配置","link":"#全局持久化配置","children":[]},{"level":2,"title":"全局 key 配置","slug":"全局-key-配置","link":"#全局-key-配置","children":[]},{"level":2,"title":"每个 Store 可以有多个持久化配置","slug":"每个-store-可以有多个持久化配置","link":"#每个-store-可以有多个持久化配置","children":[]},{"level":2,"title":"强制恢复数据","slug":"强制恢复数据","link":"#强制恢复数据","children":[]},{"level":2,"title":"强制持久化","slug":"强制持久化","link":"#强制持久化","children":[]}],"relativePath":"zh/guide/advanced.md","lastUpdated":1676564958000}'),e={name:"zh/guide/advanced.md"},t=n(`<h1 id="进阶用法" tabindex="-1">进阶用法 <a class="header-anchor" href="#进阶用法" aria-hidden="true">#</a></h1><p>该插件还为更高级的用法提供了额外的 API</p><h2 id="全局持久化配置" tabindex="-1">全局持久化配置 <a class="header-anchor" href="#全局持久化配置" aria-hidden="true">#</a></h2><p>在安装插件之后，你可以使用 <code>createPersistedState</code> 来初始化插件。这些配置将会成为项目内所有 Store 的默认选项。</p><blockquote><p>这种方法有时被称为工厂函数。</p></blockquote><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> { createPinia } </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;pinia&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> { createPersistedState } </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;pinia-plugin-persistedstate&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">pinia</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">createPinia</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">pinia</span><span style="color:var(--shiki-token-function);">.use</span><span style="color:var(--shiki-color-text);">(</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">createPersistedState</span><span style="color:var(--shiki-color-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    storage</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> sessionStorage</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  })</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"></span></code></pre></div><p>上述例子中，每个声明 <code>persist: true</code> 的 Store 都会默认将数据持久化到 <code>sessionStorage</code> 中。</p><p>可用的全局配置包括：</p><ul><li><a href="/pinia-plugin-persistedstate/zh/guide/config.html#storage"><code>storage</code></a></li><li><a href="/pinia-plugin-persistedstate/zh/guide/config.html#serializer"><code>serializer</code></a></li><li><a href="/pinia-plugin-persistedstate/zh/guide/config.html#beforerestore"><code>beforeRestore</code></a></li><li><a href="/pinia-plugin-persistedstate/zh/guide/config.html#afterrestore"><code>afterRestore</code></a></li></ul><div class="info custom-block"><p class="custom-block-title">提示</p><p>传递给单个 Store 的 <code>persist</code> 配置的任何选项都将覆盖全局配置中声明的对应项。</p></div><h2 id="全局-key-配置" tabindex="-1">全局 key 配置 <a class="header-anchor" href="#全局-key-配置" aria-hidden="true">#</a></h2><p>全局 <code>key</code> 配置接受传入 Store key 的函数，并返回一个新的 storage 密钥。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> { createPinia } </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;pinia&#39;</span></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> { createPersistedState } </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;pinia-plugin-persistedstate&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">pinia</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">createPinia</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">pinia</span><span style="color:var(--shiki-token-function);">.use</span><span style="color:var(--shiki-color-text);">(</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">createPersistedState</span><span style="color:var(--shiki-color-text);">({</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    </span><span style="color:var(--shiki-token-function);">key</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> id </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">\`__persisted__</span><span style="color:var(--shiki-token-keyword);">\${</span><span style="color:var(--shiki-color-text);">id</span><span style="color:var(--shiki-token-keyword);">}</span><span style="color:var(--shiki-token-string-expression);">\`</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  })</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">)</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> { defineStore } </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;pinia&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">defineStore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;store&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">state</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> () </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> ({ saved</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;&#39;</span><span style="color:var(--shiki-color-text);"> })</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  persist</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">true</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})</span></span>
<span class="line"></span></code></pre></div><p>上述例子中，store 将保存在 <code>__persisted__store</code> key 下，而不是 <code>store</code> 下。</p><div class="info custom-block"><p class="custom-block-title">提示</p><p>当你需要在全局范围内对所有 Store key 添加前缀/后缀时，应考虑此选项。</p></div><h2 id="每个-store-可以有多个持久化配置" tabindex="-1">每个 Store 可以有多个持久化配置 <a class="header-anchor" href="#每个-store-可以有多个持久化配置" aria-hidden="true">#</a></h2><p>在某些特定的用例中，你需要将数据从单个 Store 持久化到不同的 storage 中。<code>persist</code> 选项还可以接受多个类似的配置。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> { defineStore } </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;pinia&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">defineStore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;store&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">state</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> () </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> ({</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    toLocal</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    toSession</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    toNowhere</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  })</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  persist</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> [</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      paths</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-string-expression);">&#39;toLocal&#39;</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      storage</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> localStorage</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      paths</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> [</span><span style="color:var(--shiki-token-string-expression);">&#39;toSession&#39;</span><span style="color:var(--shiki-color-text);">]</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      storage</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> sessionStorage</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  ]</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})</span></span>
<span class="line"></span></code></pre></div><p>上述例子中， <code>toLocal</code> 的值将保存在 <code>localStorage</code> 中，而 <code>toSession</code> 的值将保留在 <code>sessionStorage</code> 中，<code>toNowhere</code> 则不会持久化。</p><div class="warning custom-block"><p class="custom-block-title">警告</p><p>在两种持久化配置中，不指定 <code>paths</code> 选项或以同一路径为目标时要注意，因为这可能会导致恢复后的数据不一致。在恢复数据的过程中，持久化的处理顺序将与声明时的顺序相同。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> { defineStore } </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;pinia&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-function);">defineStore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;store&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">state</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> () </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> ({</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    someData</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;你好 Pinia&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  })</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  persist</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> [</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      storage</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> localStorage</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">      storage</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> sessionStorage</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    }</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  ]</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})</span></span>
<span class="line"></span></code></pre></div><p>在上述特定情况下，恢复数据后，从 <code>sessionStorage</code> 取回的数据将替换从 <code>localStorage</code> 取回的数据。</p></div><h2 id="强制恢复数据" tabindex="-1">强制恢复数据 <a class="header-anchor" href="#强制恢复数据" aria-hidden="true">#</a></h2><p>每个 Store 都有 <code>$hydrate</code> 方法来手动触发数据恢复。默认情况下，调用此方法还将触发 <code>beforeRestore</code> 和 <code>afterRestore</code> 钩子。但是你可以通过配置方法来避免这两个钩子触发。</p><p>例如在下面 Store 中：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> { defineStore } </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;pinia&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">useStore</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">defineStore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;store&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">state</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> () </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> ({</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    someData</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;你好 Pinia&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  })</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})</span></span>
<span class="line"></span></code></pre></div><p>你可以调用 <code>$hydrate</code> 方法：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">store</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">useStore</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">store</span><span style="color:var(--shiki-token-function);">.$hydrate</span><span style="color:var(--shiki-color-text);">({ runHooks</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">false</span><span style="color:var(--shiki-color-text);"> })</span></span>
<span class="line"></span></code></pre></div><p>这将从 storage 中获取数据并用它替换当前的 state。并且在上面的示例中，钩子函数不会被触发。</p><div class="warning custom-block"><p class="custom-block-title">警告</p><p>在大多数情况下，你不需要手动恢复 state 。并且确保知道你使用 <code>$hydrate</code> 的原因不是因为 bug （无论是你的代码导致的还是插件本身原因）。</p></div><h2 id="强制持久化" tabindex="-1">强制持久化 <a class="header-anchor" href="#强制持久化" aria-hidden="true">#</a></h2><p>每个 Store 都有 <code>$persist</code> 方法来手动触发持久化。</p><p>例如在下面 store 中：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">import</span><span style="color:var(--shiki-color-text);"> { defineStore } </span><span style="color:var(--shiki-token-keyword);">from</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;pinia&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">useStore</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">defineStore</span><span style="color:var(--shiki-color-text);">(</span><span style="color:var(--shiki-token-string-expression);">&#39;store&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span><span style="color:var(--shiki-color-text);"> {</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  </span><span style="color:var(--shiki-token-function);">state</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> () </span><span style="color:var(--shiki-token-keyword);">=&gt;</span><span style="color:var(--shiki-color-text);"> ({</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">    someData</span><span style="color:var(--shiki-token-keyword);">:</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-string-expression);">&#39;你好 Pinia&#39;</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">  })</span><span style="color:var(--shiki-token-punctuation);">,</span></span>
<span class="line"><span style="color:var(--shiki-color-text);">})</span></span>
<span class="line"></span></code></pre></div><p>你可以调用 <code>$persist</code> 方法：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki css-variables"><code><span class="line"><span style="color:var(--shiki-token-keyword);">const</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-constant);">store</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-keyword);">=</span><span style="color:var(--shiki-color-text);"> </span><span style="color:var(--shiki-token-function);">useStore</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:var(--shiki-token-constant);">store</span><span style="color:var(--shiki-token-function);">.$persist</span><span style="color:var(--shiki-color-text);">()</span></span>
<span class="line"></span></code></pre></div><p>这会强制将 Store state 保存在已配置的 storage 中。</p><div class="warning custom-block"><p class="custom-block-title">警告</p><p>在大多数情况下，你不需要手动保存 state 。并且确保知道你使用 <code>$persist</code> 的原因不是因为 bug （无论是你的代码导致的还是插件本身原因）。</p></div>`,37),l=[t];function r(i,p,c,k,y,h){return o(),a("div",null,l)}const x=s(e,[["render",r]]);export{d as __pageData,x as default};
